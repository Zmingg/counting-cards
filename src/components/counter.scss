@import "../style/colors.scss";

/* font size */
$font-size: 160px;
/* the segmentation-line's height */
$segmentation-height: calc(#{$font-size} * .05);
/* margin */
$margin: calc(#{$font-size} * .05);
/* colors */
$background-color: $secondary-color;
$font-color: $primary-color;
/* perspective */
$perspective: 300px;

button {
  display: block;
  height: 50px;
}

.ui-counter {
  font-weight: bold;
  $half-height: calc(#{$font-size} * .6);
  $rotate-height: calc(#{$half-height} * 2);
  $counter-height: calc(#{$half-height} * 2 + #{$segmentation-height});
  $border-radius: calc(#{$font-size} * .1);
  display: inline-block;

  .counter-num {
    width: $font-size;
    height: $counter-height;
    line-height: $counter-height;
    font-size: $font-size;
    text-align: center;
    background: transparent;
    margin: 0 $margin;

    position: relative;;
    display: inline-block;

    .top, .bottom {
      height: $half-height;
      background: $background-color;
      color: $font-color;
      overflow: hidden;
    }

    .placeholder {
      height: $half-height;
      background: transparent;
      overflow: hidden;
    }

    .segmentation {
      height: $segmentation-height;
      background: transparent;
    }

    span {
      display: block;
      height: $counter-height;
    }

    .static, .rotate {
      .top {
        border-radius: $border-radius $border-radius 0 0;
      }

      .bottom {
        border-radius: 0 0 $border-radius $border-radius;
        position: relative;

        span {
          position: absolute;
          width: 100%;
          bottom: 0;
        }
      }
    }

    .static {
      height: $counter-height;
      position: relative;
    }

    .rotate {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
      width: 100%;
      height: $rotate-height;
    }

    .current {
      z-index: 2;
    }

    .next {
      z-index: 1;
      margin-top: $segmentation-height;
    }
  }
}

.next{
  transform: perspective($perspective) rotateX(90deg);
}

.rotate-current-enter {
  transform: perspective($perspective) rotateX(0deg);
}

.rotate-current-enter-active {
  transform: perspective($perspective) rotateX(-90deg);
  //transition: all 300ms linear;
}

.rotate-current-enter-done {
  transform: perspective($perspective) rotateX(-90deg);
  transition: all 0ms linear;
}

.rotate-current-exit {
  transform: perspective($perspective) rotateX(0deg);
  transition: all 0ms linear;
}

.rotate-next-enter {
  transform:  perspective($perspective) rotateX(90deg);
}

.rotate-next-enter-active {
  transform:  perspective($perspective) rotateX(0deg);
  //transition: all 300ms linear 300ms;
}

.rotate-next-enter-done {
  transform: perspective($perspective) rotateX(90deg);
  transition: all 0ms linear;
}

.rotate-next-exit {
  transform: perspective($perspective) rotateX(90deg);
  transition: all 0ms linear;
}
